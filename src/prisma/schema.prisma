datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  issuer           String 
  email            String  @unique
  phone_number     Int? 
  public_address   String?
  verified_by      Kyc?
  devices          Device[]
  assets  Asset[] @relation(fields: [assetIds], references: [id])
  assetIds String[]   @db.ObjectId
  // assets           Asset[]
  // notifications    NotificationsBearer?
}

model Kyc {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String @unique @db.ObjectId
  triggerer        Alert   @relation(fields: [triggererId], references:  [id])
  triggererId      String @unique @db.ObjectId
} 

model Device {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  token            String
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  reciever         Alert   @relation(fields: [recieverId], references: [id])
  recieverId       String @unique @db.ObjectId
}

model Alert {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  content          String
  type             String
  date             DateTime
  read             Boolean
  triggerer        Kyc?
  reciever         Device?
}

// model Asset {
//   id               String @id @default(auto()) @map("_id") @db.ObjectId
//   folder_hash      String
//   root_files       Int
//   subfolder_files  Int
//   user             User   @relation(fields: [userId], references: [id])
//   userId           String @unique @db.ObjectId
//   folders          Sub_Folder[]
//   sender         Alert   @relation(fields: [senderId], references: [id])
//   senderId       String @unique @db.ObjectId
// }

model Asset {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // owner User @relation(fields: [ownerId], references: [id])
  // ownerId String @unique @db.ObjectId
  owners  User[] @relation(fields: [ownerIds], references: [id])
  ownerIds String[]   @db.ObjectId
  title String 
  description String
  AVM String
  surveyProof String
  otherDocuments String[]
  videos String[]
  pictures String[]
}


// model Sub_Folder {
//   id               String @id @default(auto()) @map("_id") @db.ObjectId
//   folder_hash      String
//   root_files       Int
//   subfolder_files  Int
//   asset            Asset   @relation(fields: [assetId], references: [id])
//   assetId          String @unique @db.ObjectId
//   folderId         String? @db.ObjectId
//   folder           Sub_Folder?   @relation("SubFolders", fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   folders          Sub_Folder[]  @relation("SubFolders")
// }

// model Documents {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   asset Asset @relation(fields: [assetId], references: [id])
//   assetId String @unique @db.ObjectId
//   hasBeenApproved Boolean
// }


model NotificationsBearer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @db.ObjectId @unique
  bearerId         String @unique @db.ObjectId
  notifications    Notifications[]
}

model Notifications {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  bearerId           String @db.ObjectId
  bearer             NotificationsBearer @relation(fields: [bearerId], references: [bearerId], onDelete: Cascade)
  type               String
  title              String
  content            String
  read               Boolean @default(false)
  createdAt          DateTime @default(now())
}
