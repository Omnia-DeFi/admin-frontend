datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// model User {
//   id               String  @id @default(auto()) @map("_id") @db.ObjectId
//   issuer           String 
//   email            String  @unique
//   phone_number     Int? 
//   public_address   String?
//   verified_by      Kyc?
//   devices          Device[]
//   assets  Asset[] @relation(fields: [assetIds], references: [id])
//   assetIds String[]   @db.ObjectId
// }

// model Kyc {
//   id               String      @id @default(auto()) @map("_id") @db.ObjectId
//   user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId           String @unique @db.ObjectId
//   triggerer        Alert   @relation(fields: [triggererId], references:  [id])
//   triggererId      String @unique @db.ObjectId
// } 

// model Device {
//   id               String @id @default(auto()) @map("_id") @db.ObjectId
//   token            String
//   user             User   @relation(fields: [userId], references: [id])
//   userId           String @unique @db.ObjectId
//   reciever         Alert   @relation(fields: [recieverId], references: [id])
//   recieverId       String @unique @db.ObjectId
// }

// model Alert {
//   id               String @id @default(auto()) @map("_id") @db.ObjectId
//   title            String
//   content          String
//   type             String
//   date             DateTime
//   read             Boolean
//   triggerer        Kyc?
//   reciever         Device?
// }

// model Asset {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   owners  User[] @relation(fields: [ownerIds], references: [id])
//   ownerIds String[]   @db.ObjectId
//   title String 
//   description String
//   AVM String
//   surveyProof String
//   otherDocuments String[]
//   videos String[]
//   pictures String[]
// }

// model NotificationsBearer {
//   id               String @id @default(auto()) @map("_id") @db.ObjectId
//   userId           String @db.ObjectId @unique
//   bearerId         String @unique @db.ObjectId
//   notifications    Notifications[]
// }

// model Notifications {
//   id                 String @id @default(auto()) @map("_id") @db.ObjectId
//   bearerId           String @db.ObjectId
//   bearer             NotificationsBearer @relation(fields: [bearerId], references: [bearerId], onDelete: Cascade)
//   type               String
//   title              String
//   content            String
//   read               Boolean @default(false)
//   createdAt          DateTime @default(now())
// }

model User {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  issuer                String
  email                 String               @unique
  phone_number          Int?
  public_address        String?
  notifications         NotificationsBearer? @relation(fields: [notificationsBearerId], references: [id])
  notificationsBearerId String?              @db.ObjectId
  kyc              Kyc[]
  assets           Asset[]
  devices          Device[]
}

model Device {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  token            String
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  reciever         Alert   @relation(fields: [recieverId], references: [id])
  recieverId       String @unique @db.ObjectId
}

model Alert {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  content          String
  type             String
  date             DateTime
  read             Boolean
  triggerer        Kyc?
  reciever         Device?
}

model NotificationsBearer {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @unique @db.ObjectId
  bearerId      String          @unique @db.ObjectId
  notifications Notifications[]
  User          User[]
}

model Notifications {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  bearerId  String              @db.ObjectId
  bearer    NotificationsBearer @relation(fields: [bearerId], references: [bearerId])
  type      String
  title     String
  content   String
  createdAt DateTime
  read      Boolean
}

// model Kyc {
//   id               String      @id @default(auto()) @map("_id") @db.ObjectId
//   user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId           String @db.ObjectId
//   type             String
//   supportiveData   Json
//   status           String
//   requestedAt      DateTime
//   approvedAt       DateTime
// }


model Kyc {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String @unique @db.ObjectId
  triggerer        Alert   @relation(fields: [triggererId], references:  [id])
  triggererId      String @unique @db.ObjectId
} 

model Asset {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String @db.ObjectId
  images            String[]
  title             String
  description       String
  AVM               String
  surveyProof       String
  landRegistry      String
  floorArea         String
  hasOutdoorSpace   Boolean
  bedrooms          Int
  bathrooms         Int
  otherRooms        Int
  floorPrice        Int
  saleTimeframe     Int
  // assetFolderLink   String
  // mintAddress       String
  // saleStatus        String
  // verificationState String
  // outdoorSpaceSize  Int
  extraConditionsLabels  String[]
  extraConditionsDescriptions String[]
}