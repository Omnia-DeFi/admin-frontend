datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  issuer           String 
  email            String  @unique
  phone_number     Int?
  public_address   String?
  verified_by      Kyc?
  devices          Device[]
  assets           Asset[]
}

model Kyc {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  triggerer        Alert   @relation(fields: [triggererId], references:  [id])
  triggererId      String @unique @db.ObjectId
} 

model Device {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  token            String
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  reciever         Alert   @relation(fields: [recieverId], references: [id])
  recieverId       String @unique @db.ObjectId
}

model Alert {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  content          String
  type             String
  date             DateTime
  read             Boolean
  triggerer        Kyc?
  reciever         Device?
  sender           Asset?
}

model Asset {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  folder_hash      String
  root_files       Int
  subfolder_files  Int
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  folders          Sub_Folder[]
  sender         Alert   @relation(fields: [senderId], references: [id])
  senderId       String @unique @db.ObjectId
}

model Sub_Folder {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  folder_hash      String
  root_files       Int
  subfolder_files  Int
  asset            Asset   @relation(fields: [assetId], references: [id])
  assetId          String @unique @db.ObjectId
  folderId         String? @db.ObjectId
  folder           Sub_Folder?   @relation("SubFolders", fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  folders          Sub_Folder[]  @relation("SubFolders")
}